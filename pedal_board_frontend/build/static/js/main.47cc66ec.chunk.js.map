{"version":3,"sources":["components/Updateform.js","components/Artist.js","components/Header.js","components/NewForm.js","components/NewPedal.js","components/UpdatePedal.js","components/Pedal.js","components/AllPedals.js","App.js","serviceWorker.js","index.js"],"names":["Updateform","props","state","artists","name","artist","band","image","wiki","pedals","handleChange","bind","handleSubmit","handleCheckChange","e","this","setState","target","id","value","chks","document","getElementById","querySelectorAll","checked","i","length","push","JSON","parse","console","log","stringify","fetch","baseURL","method","body","map","pedal","headers","response","json","data","foundArtist","findIndex","foundItem","copyArtists","handleUpdate","toggleUpdateForm","error","onSubmit","preventDefault","className","type","onChange","availablePedals","key","class","htmlFor","model","Component","Artist","artistsPedals","toggleShowPedals","showUpdate","toggleShow","src","alt","href","rel","onClick","brand","deleteArtist","Header","NewForm","handleAddArtist","toggleNewForm","placeholder","NewPedal","handleAddPedal","toggleNewPedalForm","UpdatePedal","foundPedal","copyPedals","updatePedal","toggleUpdatePedalForm","Pedal","showUpdatePedal","deletePedal","AllPedals","newPedal","App","showPedals","newArtist","getArtists","getPedals","prevState","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.47cc66ec.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Updateform extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      artists: this.props.artists,\n      name: this.props.artist.name,\n      band: this.props.artist.band,\n      image: this.props.artist.image,\n      wiki: this.props.artist.wiki,\n      pedals: this.props.artist.pedals\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleCheckChange = this.handleCheckChange.bind(this)\n  }\n\n  //////////////////////////// HANDLE CHANGES ////////////////////////////////\n//text input changes\n  handleChange(e){\n  this.setState({[e.target.id]: e.target.value})\n}\n\n//checkbox changes\nhandleCheckChange(e){\n  let form = document.getElementById('myform');\n      let chks = form.querySelectorAll('input[type=\"checkbox\"]');\n      let checked = [];\n      for(let i = 0; i < chks.length; i++){\n          if(chks[i].checked){\n              checked.push(JSON.parse(chks[i].value))\n          }\n          this.setState({\n            pedals: [...checked]\n          })\n      }\n      console.log(chks);\n      console.log(JSON.stringify(checked));\n      console.log(checked);\n      return checked;\n  }\n\n\n////////////////////////////// HANDLE SUBMIT /////////////////////////////////\n\n async handleSubmit(artist){\n   try {\n     console.log(artist.id);\n     let response = await fetch(`${this.props.baseURL}/api/artist/${artist.id}/`, {\n       method: 'PUT',\n       body: JSON.stringify({\n         name: this.state.name,\n         band: this.state.band,\n         image: this.state.image,\n         wiki: this.state.wiki,\n         pedals: this.state.pedals.map(pedal => pedal.id)\n       }),\n       headers: {\n         'Content-Type': 'application/json'\n       }\n     })\n     let data = await response.json()\n     console.log(data);\n     const foundArtist = this.state.artists.findIndex(foundItem =>\n       (foundItem.id === artist.id))\n    const copyArtists = [...this.props.artists]\n    copyArtists[foundArtist].name = data.name\n    copyArtists[foundArtist].band = data.band\n    copyArtists[foundArtist].image = data.image\n    copyArtists[foundArtist].wiki = data.wiki\n    copyArtists[foundArtist].pedals = this.state.pedals\n    this.props.handleUpdate(copyArtists)\n    this.props.toggleUpdateForm()\n    // window.location.reload(false);\n\n   } catch (e) {\n     console.error(e)\n   }\n }\n\n\n\n\n\n //////////////////////////// RENDER /////////////////////////////////////////\n  render() {\n    return(\n        <>\n        <form id='myform'onSubmit={(e)=>{\n        e.preventDefault()\n        this.handleSubmit(this.props.artist)\n      }}>\n\n          <input className=\"form-control form-control-lg\" type='text' id=\"name\" value={this.state.name} onChange={this.handleChange}/>\n\n          <input className=\"form-control form-control-lg\" type='text' id=\"band\" value={this.state.band} onChange={this.handleChange}/>\n\n          <input className=\"form-control form-control-lg\" type='text' id=\"image\" value={this.state.image} onChange={this.handleChange}/>\n\n          <input className=\"form-control form-control-lg\" type='text' id=\"wiki\" value={this.state.wiki} onChange={this.handleChange}/>\n\n          <div className='checkboxlist'>\n          {\n            this.props.availablePedals.map((pedal, i) =>\n            <div className=\"form-check\"key={i}>\n\n              <input className=\"form-check-input\"  id={`${pedal}`}type=\"checkbox\" value={JSON.stringify(pedal)} onChange={this.handleCheckChange}/>\n                <label class=\"form-check-label\" htmlFor={pedal}>{pedal.model}</label>\n\n            </div>\n            )\n          }\n          </div>\n\n\n\n          <input className=\"form-control btn btn-outline-success\" type=\"submit\"/>\n\n        </form>\n      </>\n\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Updateform from './Updateform.js'\n\nexport default class Artist extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      artist: this.props.artist,\n      artistsPedals: [],\n      toggleShowPedals: false,\n      showUpdate: false\n    }\n    // this.getArtistsPedals = this.getArtistsPedals.bind(this)\n    this.toggleShow = this.toggleShow.bind(this)\n    this.toggleUpdateForm = this.toggleUpdateForm.bind(this)\n  }\n\n\n///////////////////////// Function to get associated pedals ////////////////\n//Get associated pedals\n  // getArtistsPedals(){\n  //   let pedalTemp = []\n  //   let pedals = this.props.artist.pedals\n  //   for (let i = 0; i < pedals.length; i++) {\n  //     this.props.availablePedals.map(pedal => {\n  //     if (pedal.id === pedals[i]) {\n  //\n  //       pedalTemp.push(pedal)\n  //     }\n  //     })\n  //     // console.log(pedalTemp);\n  //   }\n  //   this.setState({\n  //     artistsPedals: [...pedalTemp]\n  //   })\n  // }\n\n//////////////////////// Toggle functions ///////////////////////////////////\n//toggle show associated pedals\n  toggleShow(){\n    this.setState({toggleShowPedals: !this.state.toggleShowPedals})\n  }\n// toggle update artist form\n  toggleUpdateForm(){\n  this.setState({\n    showUpdate: !this.state.showUpdate\n  })\n}\n\n/////////////////////// Component Did Mount /////////////////////////////////\n  // componentDidMount(){\n  //   this.getArtistsPedals()\n  // }\n\n\n\n/////////////////////// RENDER ///////////////////////////////////////////////\n  render () {\n    return(\n      <>\n      <div className=\"card\">\n        <img className=\"card-img-top\"src={this.props.artist.image} alt=\"artist\"/>\n        <h1 className=\"card-header\">{this.props.artist.name}</h1>\n        <h3>{this.props.artist.band}</h3>\n        <a href={this.props.artist.wiki} target='_blank'rel=\"noopener noreferrer\"><h5>Learn More</h5></a>\n        <h3 className='show-hide'onClick={()=>this.toggleShow()}>\n        {\n          this.state.toggleShowPedals ? \"Hide Pedal Board\" : \"Show Pedal Board\"\n        }\n        </h3>\n\n        {\n          this.state.toggleShowPedals ?\n          <div className='pedal-group'>\n          {\n\n            this.state.artist.pedals.map((pedal) =>\n\n              <div className=\"pedal-container\" >\n                <div>\n                  <h5>Model: {pedal.model}</h5>\n                  <h6>Brand: {pedal.brand}</h6>\n                </div>\n                <img className='pedal-image' src={pedal.image} alt='pedal'/>\n\n              </div>\n            )\n\n          }\n          </div>\n          : null\n        }\n        <div className=\"button-group\">\n        <button className=\"btn btn-warning\"onClick={()=>{this.toggleUpdateForm()}}>UPDATE</button>\n        <button className=\"btn btn-danger\"onClick={()=> this.props.deleteArtist(this.props.artist.id)}>DELETE</button>\n        </div>\n        {\n                 this.state.showUpdate\n                 ? <Updateform\n                 baseURL={this.props.baseURL}\n                  toggleUpdateForm={this.toggleUpdateForm}\n                 artist={this.props.artist}\n                 handleUpdate={this.props.handleUpdate}\n                 artists={this.props.artists}\n                 artistsPedals={this.state.artistsPedals}\n                 availablePedals={this.props.availablePedals}/>\n                 : null\n        }\n      </div>\n\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\n\nexport default class Header extends Component{\n  render(){\n    return(\n      <header>\n        <h1>Pedal Board</h1>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\n\nexport default class NewForm extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: '',\n      band: '',\n      image: '',\n      wiki: '',\n\n    }\n    this.handleChange = this.handleChange.bind(this)\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n\n  }\n\n  //////////////////////// Handle changes ///////////////////////////////////\n//Text input changes\n  handleChange(e){\n  this.setState({[e.target.id]: e.target.value})\n}\n\n\n\n  ///////////////////////// Handle Submit ///////////////////////////////////\n\nasync handleSubmit(e) {\n  e.preventDefault()\n  try {\n    let response = await fetch(`${this.props.baseURL}/api/artist/`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: this.state.name,\n        band: this.state.band,\n        image: this.state.image,\n        wiki: this.state.wiki,\n\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    let data = await response.json()\n    console.log(data);\n    this.props.handleAddArtist(data)\n    this.props.toggleNewForm()\n    this.state = {\n      name:'',\n      band: '',\n      image: '',\n      wiki: '',\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n\n\n\n\n\n\n\n/////////////////////////// RENDER /////////////////////////////////////////\n  render(){\n    return(\n      <>\n\n          <form id='myform'onSubmit={this.handleSubmit}>\n\n            <input className=\"form-control form-control-lg\" type='text' id=\"name\" placeholder=\"Name\" onChange={this.handleChange}/>\n\n            <input className=\"form-control form-control-lg\" type='text' id=\"band\" placeholder=\"Band\" onChange={this.handleChange}/>\n\n            <input className=\"form-control form-control-lg\" type='text' id=\"image\" placeholder=\"Image URL\" onChange={this.handleChange}/>\n\n            <input className=\"form-control form-control-lg\" type='text' id=\"wiki\" placeholder=\"Wiki URL\" onChange={this.handleChange}/>\n\n\n            <input className=\"form-control btn btn-outline-success\" type=\"submit\"/>\n\n          </form>\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class NewPedal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      model: '',\n      band: '',\n      image: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  handleChange(e){\n  this.setState({[e.target.id]: e.target.value})\n}\nasync handleSubmit(e) {\n  e.preventDefault()\n  try {\n    let response = await fetch(`${this.props.baseURL}/api/pedal/`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        model: this.state.model,\n        brand: this.state.brand,\n        image: this.state.image,\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    let data = await response.json()\n    console.log(data);\n    this.props.handleAddPedal(data)\n    this.props.toggleNewPedalForm()\n    this.state = {\n      model:'',\n      brand: '',\n      image: '',\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n  render() {\n    return(\n      <form id='pedalform'onSubmit={this.handleSubmit}>\n\n        <input className=\"form-control form-control-lg\"type='text' id=\"model\" placeholder=\"Model\" onChange={this.handleChange}/>\n\n        <input className=\"form-control form-control-lg\"type='text' id=\"brand\" placeholder=\"Brand\" onChange={this.handleChange}/>\n\n        <input className=\"form-control form-control-lg\"type='text' id=\"image\" placeholder=\"Image URL\" onChange={this.handleChange}/>\n\n        <input className=\"form-control btn btn-outline-success\" type=\"submit\"/>\n\n      </form>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class UpdatePedal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pedals: this.props.availablePedals,\n      model: this.props.pedal.model,\n      brand: this.props.pedal.brand,\n      image: this.props.pedal.image\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  handleChange(e){\n  this.setState({[e.target.id]: e.target.value})\n}\nasync handleSubmit(pedal) {\n  console.log(pedal);\n  try {\n    let response = await fetch(`${this.props.baseURL}/api/pedal/${pedal.id}/`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        model: this.state.model,\n        brand: this.state.brand,\n        image: this.state.image\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    let data = await response.json()\n    console.log(data);\n    const foundPedal = this.state.pedals.findIndex(foundItem => (foundItem.id === pedal.id))\n    const copyPedals = [...this.state.pedals]\n    copyPedals[foundPedal].model = data.model\n    copyPedals[foundPedal].brand = data.brand\n    copyPedals[foundPedal].image = data.image\n    this.props.updatePedal(copyPedals)\n    console.log(copyPedals);\n    this.props.toggleUpdatePedalForm()\n  } catch (e) {\n    console.error(e)\n  }\n}\n  render() {\n    return(\n      <>\n\n        <form id='pedalUpdateform'onSubmit={(e)=>{\n        e.preventDefault()\n        this.handleSubmit(this.props.pedal)}}>\n\n          <input className=\"form-control form-control-lg\"type='text' id=\"model\" value={this.state.model} onChange={this.handleChange}/>\n\n          <input className=\"form-control form-control-lg\" type='text' id=\"brand\" value={this.state.brand} onChange={this.handleChange}/>\n\n          <input className=\"form-control form-control-lg\"type='text' id=\"image\" value={this.state.image} onChange={this.handleChange}/>\n\n          <input className=\"form-control btn btn-outline-success\" type=\"submit\"/>\n\n        </form>\n\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport UpdatePedal from './UpdatePedal.js'\n\nexport default class Pedal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showUpdatePedal: false\n    }\n    this.toggleUpdatePedalForm = this.toggleUpdatePedalForm.bind(this)\n  }\n\n  toggleUpdatePedalForm(){\n    this.setState({\n      showUpdatePedal: !this.state.showUpdatePedal\n    })\n  }\n\n  render() {\n    return(\n      <div  className=\"card pedal\" >\n        <div>\n          <h6 className=\"card-header\">{this.props.pedal.model}</h6>\n        </div>\n        <img className='pedal-image' src={this.props.pedal.image} alt='pedal'/>\n\n        <div className=\"button-group\">\n        <button className=\"btn btn-warning\"onClick={()=>{this.toggleUpdatePedalForm()}}>UPDATE</button>\n\n        <button className=\"btn btn-danger\"onClick={()=> this.props.deletePedal(this.props.pedal.id)}>DELETE</button>\n        </div>\n        {\n          this.state.showUpdatePedal\n          ? <UpdatePedal\n          baseURL={this.props.baseURL}\n          pedal={this.props.pedal} toggleUpdatePedalForm={this.toggleUpdatePedalForm}\n          availablePedals={this.props.availablePedals}\n          updatePedal={this.props.updatePedal}/>\n          : null\n        }\n\n\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport NewPedal from './NewPedal.js'\nimport Pedal from './Pedal.js'\n\n\nexport default class AllPedals extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newPedal: false,\n\n    }\n    this.toggleNewPedalForm = this.toggleNewPedalForm.bind(this)\n\n  }\n\n  ///////////////////////// Toggle form /////////////////////////////////////\ntoggleNewPedalForm(){\n  this.setState({\n    newPedal: !this.state.newPedal\n  })\n}\n\n\n/////////////////////////// RENDER ////////////////////////////////////////\n  render(){\n    return(\n      <>\n      <div className='pedal-list'>\n\n       {\n         this.props.availablePedals.map((pedal, i) =>\n         <Pedal\n         baseURL={this.props.baseURL}\n         key={i}\n         pedal={pedal}\n         deletePedal={this.props.deletePedal}\n         toggleUpdatePedalForm={this.toggleUpdatePedalForm}\n         updatePedal={this.props.updatePedal}\n         availablePedals={this.props.availablePedals}/>\n        )\n       }\n\n      </div>\n      <button id='add-new'className=\"btn btn-success\"onClick={()=>{this.toggleNewPedalForm()}}>Add new Pedal</button>\n      {\n        this.state.newPedal ?\n        <NewPedal\n        baseURL={this.props.baseURL}\n         handleAddPedal={this.props.handleAddPedal} toggleNewPedalForm={this.toggleNewPedalForm} />\n        : null\n      }\n\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Artist from './components/Artist.js'\nimport Header from './components/Header.js'\nimport NewForm from './components/NewForm.js'\nimport AllPedals from './components/AllPedals.js'\n\nlet baseURL = ''\n\nif (process.env.NODE_ENV === 'development') {\n  baseURL = 'http://localhost:8000'\n} else {\n  baseURL = 'https://pedal-board.herokuapp.com'\n}\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      artists: [],\n      pedals:[],\n      showPedals: false,\n      availablePedals: [],\n      newArtist: false\n    }\n    this.getArtists = this.getArtists.bind(this)\n    this.handleAddArtist = this.handleAddArtist.bind(this)\n    this.handleUpdate = this.handleUpdate.bind(this)\n    this.toggleNewForm = this.toggleNewForm.bind(this)\n    this.deleteArtist = this.deleteArtist.bind(this)\n    this.getPedals = this.getPedals.bind(this)\n    this.toggleShowPedals = this.toggleShowPedals.bind(this)\n    this.handleAddPedal = this.handleAddPedal.bind(this)\n    this.deletePedal = this.deletePedal.bind(this)\n    this.updatePedal = this.updatePedal.bind(this)\n  }\n\n  ////////////////////// Get requests ///////////////////////////////////////\n  //GET ARTISTS\n  async getArtists(){\n    try {\n      let response = await fetch(`${baseURL}/api/artist/`)\n      // console.log(response);\n      let data = await response.json()\n      console.log(data);\n      this.setState({\n        artists: data\n      })\n\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  // GET PEDALS\n  async getPedals(){\n    try {\n      let response = await fetch(`${baseURL}/api/pedal/`)\n      let data = await response.json()\n      console.log(data);\n      this.setState({\n        availablePedals: data\n      })\n      console.log(this.state.availablePedals);\n\n\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n ///////////////////// Toggle functions ////////////////////////////////////\n// Toggle New Form\ntoggleNewForm(){\n  this.setState({\n    newArtist: !this.state.newArtist\n  })\n}\n//toggle show pedal list\ntoggleShowPedals(){\n  this.setState({\n    showPedals: !this.state.showPedals\n  })\n}\n\n///////////////////// Handle adds ///////////////////////////////////////////\n// Handle adding a new artist\nhandleAddArtist(artist){\n  console.log(artist);\n  const copyArtists = [...this.state.artists, artist]\n  this.setState({\n    artists: copyArtists\n\n  })\n}\n// handle add pedal\nhandleAddPedal(pedal){\n  console.log(pedal);\n  const copyPedals = [...this.state.availablePedals, pedal]\n  this.setState({\n    availablePedals: copyPedals\n  })\n}\n\n//////////////////////////// handle updates ////////////////////////////////\n//handle update ARTIST\nhandleUpdate(artist){\n  this.setState({\n    artists: artist\n  })\n console.log(artist);\n}\n\nupdatePedal(pedal) {\n  this.setState({\n    availablePedals: pedal\n  })\n  console.log(pedal);\n}\n\n/////////////////////////// handle delete ///////////////////////////////////\n//handle deleting artist\nasync deleteArtist(id) {\n  try {\n    let response = await fetch(`${baseURL}/api/artist/${id}/`, {\n      method: 'DELETE'\n    })\n    console.log(response);\n    this.setState( prevState => {\n      const artists = prevState.artists.filter(artist => artist.id !== id)\n      return {artists}\n    })\n  } catch (e) {\n    console.error(e)\n  }\n}\n//delete pedal\nasync deletePedal(id) {\n  try {\n    let response = await fetch(`${baseURL}/api/pedal/${id}/`, {\n      method: 'DELETE'\n    })\n    this.setState( prevState => {\n      const availablePedals = prevState.availablePedals.filter(pedal => pedal.id !== id)\n      return {availablePedals}\n    })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\n////////////////////////// Component Did Mount //////////////////////////////\n//Run on load/before render. Artists and pedals\n  componentDidMount(){\n    this.getArtists()\n    this.getPedals()\n  }\n\n//////////////////////// RENDER //////////////////////////////////////////////\n  render() {\n    return(\n      <>\n      <Header />\n      <button id='add-new'className=\"btn btn-success\"onClick={()=>{this.toggleNewForm()}}>Add new Artist</button>\n        {\n           this.state.newArtist\n           ? <NewForm\n           baseURL={baseURL}\n           availablePedals={this.state.availablePedals}\n           handleAddArtist={this.handleAddArtist} toggleNewForm={this.toggleNewForm}/>\n           : null\n         }\n         <h2 className='all-pedals'onClick={this.toggleShowPedals}>All Pedals</h2>\n         {\n           this.state.showPedals\n           ? <AllPedals\n           baseURL={baseURL}\n           deletePedal={this.deletePedal}\n           handleAddPedal={this.handleAddPedal}\n           availablePedals={this.state.availablePedals}\n           updatePedal={this.updatePedal}/>\n           :null\n         }\n      <div>\n        <div className='artist-container'>\n        {\n          this.state.artists.map((artist, i) =>\n            <Artist\n            baseURL={baseURL}\n            key={i}\n            artist={artist}\n            artists={this.state.artists}\n            deleteArtist={this.deleteArtist} availablePedals={this.state.availablePedals}\n            handleUpdate={this.handleUpdate}/>\n          )\n        }\n        </div>\n      </div>\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}